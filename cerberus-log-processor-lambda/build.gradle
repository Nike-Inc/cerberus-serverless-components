version '3.0.1'

import static groovy.json.JsonOutput.prettyPrint
import static groovy.json.JsonOutput.toJson
import com.amazonaws.auth.policy.Policy
import com.amazonaws.auth.policy.Principal
import com.amazonaws.auth.policy.Statement
import com.amazonaws.auth.policy.actions.S3Actions
import com.amazonaws.services.s3.AmazonS3
import com.amazonaws.services.s3.AmazonS3ClientBuilder
import com.amazonaws.services.s3.model.BucketNotificationConfiguration
import com.amazonaws.services.s3.model.BucketPolicy
import com.amazonaws.services.s3.model.Filter
import com.amazonaws.services.s3.model.FilterRule
import com.amazonaws.services.s3.model.LambdaConfiguration
import com.amazonaws.services.s3.model.S3Event
import com.amazonaws.services.s3.model.S3KeyFilter
import com.amazonaws.services.cloudformation.AmazonCloudFormation
import com.amazonaws.services.cloudformation.AmazonCloudFormationClientBuilder
import com.amazonaws.services.cloudformation.model.DescribeStacksRequest
import com.amazonaws.services.cloudformation.model.Output
import com.amazonaws.services.cloudformation.model.Stack

buildscript {
    apply from: file(project.getRootProject().getRootDir().getPath() + File.separator + "gradle/buildscript.gradle"), to: buildscript
}

dependencies {
    compile group: 'com.amazonaws', name: 'aws-lambda-java-core', version: '1.2.1'
    compile group: 'com.amazonaws', name: 'aws-lambda-java-log4j', version: '1.0.1'
    compile group: 'com.amazonaws', name: 'aws-lambda-java-events', version: '3.10.0'
    compile group: 'com.amazonaws', name: 'aws-java-sdk-cloudformation', version: '1.12.63'
    compile group: 'com.amazonaws', name: 'aws-java-sdk-lambda', version: '1.12.63'
    compile group: 'com.fasterxml.jackson.core', name: 'jackson-core', version: '2.8.3'
    compile group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: '2.8.3'
    compile group: 'com.google.guava', name: 'guava', version: '19.0'
    compile group: 'org.apache.commons', name: 'commons-lang3', version: '3.4'
    compile group: 'commons-net', name: 'commons-net', version: '3.5'
    compile group: 'com.amazonaws', name: 'aws-java-sdk-waf', version: '1.12.63'
    compile group: 'com.fieldju', name: 'slack-client', version: '2.0.0'
    compile group: 'com.brsanthu', name: 'google-analytics-java', version: '1.1.2'
    compile group: 'com.amazonaws', name: 'aws-java-sdk-s3', version: '1.12.63'
    compile group: 'com.amazonaws', name: 'aws-java-sdk-athena', version: '1.12.63'

    testCompile group: 'junit', name: 'junit', version: '4.12'
    testCompile group: 'org.mockito', name: 'mockito-all', version: '1.9.5'
}

shadowJar {
    baseName = 'cerberus-log-processor-lambda'
    classifier = null
}

'aws-sam-deployer' {
    region = getProfileProperty('cerberus.primary_region')
    s3Bucket = getRegionBucketMap(getProfileProperty('cerberus.lambda_uploads_region_buckets')).get(getProfileProperty('cerberus.primary_region'))
    s3Prefix = "${project.getName()}-artifact-uploads"
    stackName = "${getCFStackName()}"
    samTemplatePath = "${project.projectDir}${File.separator}application.yaml"
    tokenArtifactMap = [
            '@@CODE_URI@@': "${project.buildDir}${File.separator}libs${File.separator}${project.getName()}-${version}.jar"
    ]
    parameterOverrides = [
            CerberusUrl: getProfileProperty('cerberus.url'),
            CerberusEnvironment: "${project.environment}",
            ViolationBlacklistDurationInMins: getProfileProperty('log_processor.violation_blacklist_duration_in_mins'),
            RequestPerIntervalLimit: getProfileProperty('log_processor.request_per_interval_limit'),
            IntervalInMins: getProfileProperty('log_processor.interval_in_mins'),
            SlackWebHookUrl: getProfileProperty('log_processor.slack_web_hook_url'),
            SlackIcon: getProfileProperty('log_processor.slack_cerberus_icon'),
            ManualBlacklistIpSetId: getProfileProperty('log_processor.manual_blacklist_ip_set_id'),
            ManualWhitelistIpSetId: getProfileProperty('log_processor.manual_whitelist_ip_set_id'),
            RateLimitAutoBlacklistIpSetId: getProfileProperty('log_processor.auto_blacklist_ip_set_id'),
            AthenaDatabaseName: getProfileProperty('log_processor.athena_database_name'),
            AthenaTableName: getProfileProperty('log_processor.athena_table_name'),
            AthenaQueryResultBucketName: getProfileProperty('log_processor.athena_query_result_bucket_name'),
            AlbLogBucket: getProfileProperty('log_processor.alb_log_bucket'),
            AlbLogBucketArn: "arn:aws:s3:::" + getProfileProperty('log_processor.alb_log_bucket')
    ]
    logStackOutputs = true
}

/**
 * This task is required because the ALB access log bucket is created in a separate CloudFormation stack and
 * you cannot use CloudFormation to add an event to an already existing bucket.
 */
task associateLambdaWithS3Bucket() {
    doLast {
        String albLogBucketName = getProfileProperty('log_processor.alb_log_bucket')
        String region = getProfileProperty('cerberus.primary_region')
        String stackName = getCFStackName()

        AmazonCloudFormation cloudFormationClient = AmazonCloudFormationClientBuilder.standard()
                .withRegion(region)
                .build()

        Stack stack = getCloudFormationStack(cloudFormationClient, stackName)
        String lambdaFunctionArn = getOutputValueForKey(stack, "LambdaLogProcessorFunctionArn")
        String lambdaIamRoleArn = getOutputValueForKey(stack, "LogProcessorLambdaRoleArn")
        println "Found lambda stack: '${stack.getStackName()}', lambda function ARN: '${lambdaFunctionArn}', lambda iam role ARN: '${lambdaIamRoleArn}'"

        AmazonS3 s3Client = AmazonS3ClientBuilder.standard()
                .withRegion(region)
                .build()

        addLambdaPermissionToS3Bucket(s3Client, albLogBucketName, lambdaIamRoleArn)
    }
}

Stack getCloudFormationStack(AmazonCloudFormation cloudFormationClient, String stackName) {
    return cloudFormationClient.describeStacks(
            new DescribeStacksRequest().withStackName(stackName))
                .getStacks()
                .get(0)
}

void addLambdaPermissionToS3Bucket(AmazonS3 s3Client, String s3BucketName, String lambdaIamRoleArn) {
    BucketPolicy bucketPolicy = s3Client.getBucketPolicy(s3BucketName)
    String policyText = bucketPolicy.getPolicyText()
    println "Current policy:"
    println String.format("%s/n/n", policyText)
    Policy policy = Policy.fromJson(policyText)
    Collection<Statement> statements = policy.getStatements()
    statements.add(new Statement(Statement.Effect.Allow)
            .withActions(S3Actions.GetObject, S3Actions.PutObject)
            .withResources(new com.amazonaws.auth.policy.Resource("arn:aws:s3:::${s3BucketName}/*"))
            .withPrincipals(new Principal("AWS", lambdaIamRoleArn, false)))

    println "New policy:"
    println prettyPrint(policy.toJson())
    s3Client.setBucketPolicy(s3BucketName, policy.toJson())
    println "Added Lambda permission to S3 bucket policy"
}

String getOutputValueForKey(Stack stack, String key) {
    List<Output> outputs = stack.getOutputs()
    String value = null
    for (int i = 0; i < outputs.size(); i++) {
        Output output = outputs.get(i)
        if (output.getOutputKey().equals(key)) {
            value = output.getOutputValue()
        }
    }

    return value
}

String getCFStackName() {
    return "${project.environment}-${project.name}"
}

tasks.assemble.finalizedBy shadowJar
tasks.deploySam.finalizedBy associateLambdaWithS3Bucket

tasks.check.dependsOn jacocoTestReport
