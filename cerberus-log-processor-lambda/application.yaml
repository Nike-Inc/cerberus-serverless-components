AWSTemplateFormatVersion: '2010-09-09'
Transform: 'AWS::Serverless-2016-10-31'
Description: Creates the Lambda that will process the access logs for Cerberus
Outputs:
  LambdaLogProcessorFunctionArn:
    Description: ARN of the log processor Lambda function
    Value: !GetAtt LambdaLogProcessorFunction.Arn
  LogProcessorLambdaRoleArn:
    Description: ARN of the IAM role for the log processor Lambda
    Value: !GetAtt LogProcessorLambdaRole.Arn
Parameters:
  CerberusUrl:
    Type: String
    Description: The Cerberus API to test.
  CerberusEnvironment:
    Type: String
    Description: The Cerberus environment.
  ManualBlacklistIpSetId:
    Type: String
    Description: The ID of the Cerberus manual blacklist IP set.
  ManualWhitelistIpSetId:
    Type: String
    Description: The ID of the Cerberus manual whitelist IP set.
  RateLimitAutoBlacklistIpSetId:
    Type: String
    Description: The ID of the Cerberus manual auto-blacklist IP set.
  RequestPerIntervalLimit:
    Type: String
    Description: The number of requests per interval allowed per IP address
  IntervalInMins:
    Type: String
    Description: The interval in minutes of requests per interval allowed per IP address
  ViolationBlacklistDurationInMins:
    Type: String
    Description: The number of minutes to blacklist an IP address for after it has violated the rate limit
  SlackIcon:
    Type: String
    Description: URL of an icon image file to be used in Slack
  SlackWebHookUrl:
    Type: String
    Description: The Slack HTTP endpoint to which the Lambda will post rate limit notifications
    NoEcho: true
  AthenaDatabaseName:
    Type: String
    Description: The name of ALB log's Athena database
  AthenaTableName:
    Type: String
    Description: The name of ALB log's Athena table
  AthenaQueryResultBucketName:
    Type: String
    Description: The name of Athena query result's S3 bucket
  AlbLogBucket:
    Type: String
    Description: The name of ALB log's S3 bucket
  AlbLogBucketArn:
    Type: String
    Description: The ARN of ALB log's S3 bucket
Resources:
  LambdaLogProcessorFunction:
    Type: AWS::Serverless::Function
    Properties:
      Description: Function for auto black listing ips that are misbehaving
      CodeUri: @@CODE_URI@@
      Handler: >-
         com.nike.cerberus.lambda.waf.handler.ALBAccessLogEventHandler::handleScheduledEvent
      Runtime: java8
      MemorySize: 512
      Timeout: 60
      Role: !GetAtt LogProcessorLambdaRole.Arn
      Events:
        Timer:
          Type: Schedule
          Properties:
            Schedule: rate(5 minutes)
      Environment:
        Variables:
          IAM_PRINCIPAL_ARN: !GetAtt LogProcessorLambdaRole.Arn
          REGION: !Ref AWS::Region
          CERBERUS_URL: !Ref CerberusUrl
          ENVIRONMENT: !Ref CerberusEnvironment
          MANUAL_BLACKLIST_IP_SET_ID: !Ref ManualBlacklistIpSetId
          MANUAL_WHITELIST_IP_SET_ID: !Ref ManualWhitelistIpSetId
          RATE_LIMIT_AUTO_BLACKLIST_IP_SET_ID: !Ref RateLimitAutoBlacklistIpSetId
          REQUEST_PER_INTERVAL_LIMIT: !Ref RequestPerIntervalLimit
          INTERVAL_IN_MINS: !Ref IntervalInMins
          VIOLATION_BLACKLIST_DURATION_IN_MINS: !Ref ViolationBlacklistDurationInMins
          SLACK_ICON: !Ref SlackIcon
          SLACK_WEB_HOOK_URL: !Ref SlackWebHookUrl
          ATHENA_DATABASE_NAME: !Ref AthenaDatabaseName
          ATHENA_TABLE_NAME: !Ref AthenaTableName
          ATHENA_QUERY_RESULT_BUCKET_NAME: !Ref AthenaQueryResultBucketName
          ALB_LOG_BUCKET: !Ref AlbLogBucket


  LogProcessorLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action:
              - sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
        Version: '2012-10-17'
      Path: /
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/AmazonAthenaFullAccess"
      Policies:
        - PolicyDocument:
            Statement:
              - Action:
                  - waf-regional:*
                Effect: Allow
                Resource: '*'
          PolicyName: WAFAccess
        - PolicyDocument:
            Statement:
              - Action:
                  - s3:ListAllMyBuckets
                Effect: Allow
                Resource: '*'
          PolicyName: S3BucketList
        - PolicyDocument:
            Statement:
              - Action:
                  - logs:*
                Effect: Allow
                Resource: '*'
          PolicyName: LogsAccess
        - PolicyDocument:
            Statement:
              - Action:
                  - lambda:*
                Effect: Allow
                Resource: '*'
          PolicyName: LambdaAccess
        - PolicyDocument:
            Statement:
              - Action:
                  - cloudformation:DescribeStacks
                  - cloudformation:ListStacks
                Effect: Allow
                Resource: '*'
          PolicyName: CloudFormationAccess
        - PolicyDocument:
            Statement:
              - Action:
                  - cloudwatch:PutMetricData
                Effect: Allow
                Resource: '*'
          PolicyName: CloudWatchAccess
        - PolicyDocument:
            Statement:
              - Action:
                  - s3:*
                Effect: Allow
                Resource:
                    - !Ref AlbLogBucketArn
                    - 'arn:aws:s3:::*/*'
          PolicyName: S3BucketAccess
